## 树

### 一、二叉树

**定义：**一个有穷的结点的集合

这个集合可以为空

若不为空，则它是由根节点和称为左结点（Left）和右结点（Right）的两个不相交的二叉树组成。

![1563354634303](E:\笔记\Algorithm\data-structure\image\二叉树结点图.png)

#### 特殊二叉树：

**斜二叉树：**

![1563354883983](E:\笔记\Algorithm\data-structure\image\斜二叉树.png)

**完美二叉树：**

![1563355027413](E:\笔记\Algorithm\data-structure\image\完美二叉树.png)

所有叶子结点都是满的（<u>满二叉树</u>）

**完全二叉树：**

对完美二叉树的结点标号，从上到下，从左往右。完全二叉树的序号与完美二叉树的序号一一对应，则为完全二叉树

![1563355122837](E:\笔记\Algorithm\data-structure\image\完全二叉树.png)

**二叉树性质：**

- 一个二叉树第i层的最大结点数为：2^i-1，i>=1
- 深度为k的二叉树有最大结点总数为：2^(k-1), k>=1
- 对任何非空二叉树T，若n0表示叶节点的个数、n2是深度为2的非叶节点个数，那么二者满足关系n0=n2+1

#### 二叉树的存储结构

**数组存储：**

完全二叉树：按从上到下、从左到右顺序存储n个结点的完全二叉树的结点父子关系。

![1563361873489](E:\笔记\Algorithm\data-structure\image\数组存储二叉树.png)

- 非根节点（序号i>1）的父节点的序号是i/2
- 结点（序号为i）的左孩子结点的序号是2i，（若2i<=n，否则没有左孩子）
- 结点（序号为i）的右孩子结点的序号是2i+1，（若2i+1<=n，否则没有右孩子）

**链表存储：**

![1563362512699](E:\笔记\Algorithm\data-structure\image\链表存储二叉树.png)

``` c
typedef struct TreeNode *BinTree;
typedef BinTree Position;
struct TreeNode {
    ElementType Data;
    BinTree Left;
    BinTree Right;
}
```

#### 二叉树的遍历：

1. 先序遍历

   遍历过程为：

   1）访问根节点

   2）先序遍历其左结点

   3）先序遍历其右结点

2. 中序遍历

   过程：

   1）左子树

   2）根结点

   3）右子树

3. 后序遍历

   过程：

   1）左子树

   2）右子树

   3）根结点

先序、中序和后序遍历过程：遍历过程中经过结点的路线一样，只是访问各结点的时机不同。

#### 使用栈中序遍历二叉树：

 算法：

- 遇到一个结点，就把它压入栈，并去遍历他的左子树
- 当左子树遍历结束后，从栈顶弹出这个结点并访问它
- 然后按其右指针再去中序遍历该结点的右子树

``` c
void inOrderTraversal(BinTree BT) {
    BinTree T = BT;
    Stack S = createStack(MaxSize);
    while (T || !isEmpty(S)) {
        whilee (T) {
            Push(S, T);	// 一直向左遍历并将沿途结点压入栈
            T = T->Left;
        }
        if (!isEmpty(S)) {
            T = Pop(S);	// 结点弹出
            printf("%5d", T->data);
            T = T->Right; // 遍历右子树
        }
    }
}
```

